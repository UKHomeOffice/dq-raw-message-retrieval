---
global-variables:
  aws-cli: &aws-cli docker.digital.homeoffice.gov.uk/dsa/cdl-terragrunt-docker:11
  vault-image: &vault-image quay.io/ukhomeofficedigital/hashicorp-vault:1.6.0

kind: pipeline
name: default
type: kubernetes

platform:
  os: linux
  arch: amd64

# environment:
#   SSM_KEY_ID: kubernetes-rmr-user-id-apps-${ENV}-dq
#   SSM_SECURE_KEY: kubernetes-rmr-user-key-apps-${ENV}-dq
#   APP_USER_NAME: iam-user-rmr-apps-${ENV}-dq

x-anchors:
  retrieve-vault-aws-secrets: &retrieve-vault-aws-secrets
    # Retrive vault secrets
    - vault read aws_dacc_dq/creds/drone > aws_creds.json
    - export LEASE_ID=$(cat aws_creds.json | grep lease_id | awk -F ' ' '{print $2}')
    # Update the token TTL to 10mins
    - vault lease renew -increment=600 $${LEASE_ID}
    # Get the AWS credentials
    - echo "export AWS_ACCESS_KEY_ID=$(cat aws_creds.json | grep access_key | awk -F ' ' '{print $2}')" > set_drone_secrets.sh
    - echo "export AWS_SECRET_ACCESS_KEY=$(cat aws_creds.json | grep secret_key | awk -F ' ' '{print $2}')" >> set_drone_secrets.sh
    - echo "export AWS_DEFAULT_REGION=eu-west-2" >> set_drone_secrets.sh
    # Since AWS is eventually consistent we need to sleep a little while so the AWS key is created and made available
    - sleep 10

  rotate-app-user-aws-key: &rotate-app-user-aws-key
    - source set_drone_secrets.sh
    # get app key id from ssm
    - export OLD_AWS_ACCESS_KEY_ID=$(aws ssm get-parameters --name kubernetes-rmr-user-id-apps-${ENV}-dq --query "Parameters[*].{Value:Value}" --with-decryption | grep Value | awk -F ' ' '{print $2}' | tr -d '"')
    # generate new key & id for app user
    - aws iam create-access-key --user-name iam-user-rmr-apps-${ENV}-dq > new-key.json
    - export NEW_AWS_ACCESS_KEY_ID=$(cat new-key.json | grep AccessKeyId | awk -F ' ' '{print $2}' | tr -d '"' | tr -d ',')
    - export NEW_AWS_SECRET_ACCESS_KEY=$(cat new-key.json | grep SecretAccessKey | awk -F ' ' '{print $2}' | tr -d '"' | tr -d ',')
    # delete old iam key &id
    - aws iam delete-access-key --access-key-id $OLD_AWS_ACCESS_KEY_ID --user-name iam-user-rmr-apps-${ENV}-dq
    # push new key & id to SSM
    - aws ssm put-parameter --name kubernetes-rmr-user-id-apps-${ENV}-dq --type "SecureString" --value $NEW_AWS_ACCESS_KEY_ID --overwrite
    - aws ssm put-parameter --name kubernetes-rmr-user-key-apps-${ENV}-dq --type "SecureString" --value $NEW_AWS_SECRET_ACCESS_KEY --overwrite
    # encode new key and id
    - echo "NEW_AWS_ACCESS_KEY_ID=$(echo $NEW_AWS_ACCESS_KEY_ID | base64)" > new_iam_secret.sh
    - echo "NEW_AWS_SECRET_ACCESS_KEY=$(echo $NEW_AWS_SECRET_ACCESS_KEY | base64)" >> new_iam_secret.sh
    - sleep 10

steps:
- name: build_and_push_image
  pull: if-not-exists
  image: plugins/docker
  settings:
    context: app
    dockerfile: app/Dockerfile
    force_tag: true
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/dq-raw-message-retrieval
    tags:
    - ${DRONE_COMMIT_SHA}
    - ${DRONE_BRANCH}-${DRONE_BUILD_NUMBER}
  environment:
    DOCKER_PASSWORD:
      from_secret: docker_password
    DOCKER_USERNAME:
      from_secret: docker_username
  when:
    event:
    - push

- name: trivy_scan
  pull: if-not-exists
  image: aquasec/trivy
  commands:
  - trivy --ignore-unfixed --exit-code 1 --no-progress quay.io/ukhomeofficedigital/dq-raw-message-retrieval:${DRONE_COMMIT_SHA}
  when:
    branch:
      exclude:
      - master
    event:
    - push

- name: retrieve_aws_secrets_np
  pull: if-not-exists
  image: *vault-image
  commands:
    *retrieve-vault-aws-secrets
  environment:
    VAULT_ADDR:
      from_secret: VAULT_ADDR_NOTPROD
    VAULT_TOKEN:
      from_secret: VAULT_TOKEN_NOTPROD
  when:
    event:
      - push

- name: rotate_aws_keys_np
  pull: if-not-exists
  image: *aws-cli
  commands:
    - export ENV=notprod
    *rotate-app-user-aws-key
  environment:
    ENV: notprod
  when:
    event:
      - push

- name: deploy_to_dev
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd:latest
  commands:
  - source new_iam_secret.sh
  - export KUBE_SERVER=$$DEV_KUBE_SERVER
  - export KUBE_TOKEN=$$DEV_KUBE_TOKEN
  - export BUCKET_NAME=$$DEV_BUCKET_NAME
  - export AWS_ACCESS_KEY_ID=$$NEW_AWS_ACCESS_KEY_ID
  - export AWS_SECRET_ACCESS_KEY=$$NEW_AWS_SECRET_ACCESS_KEY
  - export KEYCLOAK_CLIENT_SECRET=$$DEV_KEYCLOAK_CLIENT_SECRET
  - export KEYCLOAK_DISCOVERY=$$DEV_KEYCLOAK_DISCOVERY
  - export WHITELIST_RANGES=$$WHITELIST_RANGES_NOTPROD
  - kd -f kube/network-policy.yml -f kube/secret.yml -f kube/deployment.yml -f kube/service.yml -f kube/ingress.yml
  environment:
    DEV_BUCKET_NAME:
      from_secret: DEV_BUCKET_NAME
    DEV_KEYCLOAK_CLIENT_SECRET:
      from_secret: DEV_KEYCLOAK_CLIENT_SECRET
    DEV_KEYCLOAK_DISCOVERY:
      from_secret: DEV_KEYCLOAK_DISCOVERY
    DEV_KUBE_SERVER:
      from_secret: DEV_KUBE_SERVER
    DEV_KUBE_TOKEN:
      from_secret: DEV_KUBE_TOKEN
    ENV: notprod
    INSECURE_SKIP_TLS_VERIFY: true
    KUBE_NAMESPACE: dq-apps-notprod
    URL: retrieve-a-raw-message.notprod.dq.homeoffice.gov.uk
    WHITELIST_RANGES_NOTPROD:
      from_secret: WHITELIST_RANGES_NOTPROD
  when:
    event:
    - push

- name: retrieve_aws_secrets_prod
  pull: if-not-exists
  image: *vault-image
  commands:
    *retrieve-vault-aws-secrets
  environment:
    VAULT_ADDR:
      from_secret: VAULT_ADDR_PROD
    VAULT_TOKEN:
      from_secret: VAULT_TOKEN_PROD
  when:
    branch:
    - master
    event:
    - promote
    target:
    - production

- name: rotate_aws_keys_prod
  pull: if-not-exists
  image: *aws-cli
  commands:
    *rotate-app-user-aws-key
  environment:
    ENV: prod
  when:
    branch:
    - master
    event:
    - promote
    target:
    - production

- name: deploy_to_prod
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd:latest
  commands:
  - source new_iam_secret.sh
  - export KUBE_SERVER=$$PROD_KUBE_SERVER
  - export KUBE_TOKEN=$$PROD_KUBE_TOKEN
  - export BUCKET_NAME=$$PROD_BUCKET_NAME
  - export AWS_ACCESS_KEY_ID=$$NEW_AWS_ACCESS_KEY_ID
  - export AWS_SECRET_ACCESS_KEY=$$NEW_AWS_SECRET_ACCESS_KEY
  - export KEYCLOAK_CLIENT_SECRET=$$PROD_KEYCLOAK_CLIENT_SECRET
  - export KEYCLOAK_DISCOVERY=$$PROD_KEYCLOAK_DISCOVERY
  - kd -f kube/network-policy.yml -f kube/secret.yml -f kube/deployment.yml -f kube/service.yml -f kube/ingress.yml
  environment:
    ENV: prod
    INSECURE_SKIP_TLS_VERIFY: true
    KUBE_NAMESPACE: dq-apps
    PROD_BUCKET_NAME:
      from_secret: PROD_BUCKET_NAME
    PROD_KEYCLOAK_CLIENT_SECRET:
      from_secret: PROD_KEYCLOAK_CLIENT_SECRET
    PROD_KEYCLOAK_DISCOVERY:
      from_secret: PROD_KEYCLOAK_DISCOVERY
    PROD_KUBE_SERVER:
      from_secret: PROD_KUBE_SERVER
    PROD_KUBE_TOKEN:
      from_secret: PROD_KUBE_TOKEN
    URL: retrieve-a-raw-message.dq.homeoffice.gov.uk
  when:
    branch:
    - master
    event:
    - promote
    target:
    - production

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dindr
